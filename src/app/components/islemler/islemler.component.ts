import { Component, OnInit } from '@angular/core';
import { DynamicTableService } from "../../services/DynamicTableService";
import { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';
import {IslemlerService} from "../../services/Islemler.service";

@Component({
  selector: 'app-islemler',
  templateUrl: './islemler.component.html',
  styleUrls: ['./islemler.component.css']
})
export class IslemlerComponent implements OnInit {
  tables: string[] = [];
  selectedTable: string = '';
  tableColumns: { [key: string]: string[] } = {};
  selectedColumns: { table?: string; column?: string; name?: string; operation?: string; dataType?: string }[] = [];

  newInputName: string = '';
  inputFields: { name: string; dataType: string }[] = [];

  operationName: string = ''; // âœ… KullanÄ±cÄ±nÄ±n girdiÄŸi iÅŸlem adÄ±


  constructor(private dynamicTableService: DynamicTableService,private islemlerService: IslemlerService) {}

  ngOnInit(): void {
    this.fetchTables();
  }

  /** âœ… TablolarÄ± getir */
  fetchTables(): void {
    this.dynamicTableService.getTables().subscribe({
      next: (tables: string[]) => {
        this.tables = tables;
        this.tables.forEach(table => this.fetchColumns(table));
      },
      error: (err: any) => console.error('ğŸš¨ Tablo Listesi AlÄ±nÄ±rken Hata:', err)
    });
  }

  /** âœ… SeÃ§ilen tablonun kolonlarÄ±nÄ± getir */
  fetchColumns(tableName: string): void {
    this.dynamicTableService.getTableColumns(tableName).subscribe({
      next: (columns: string[]) => {
        this.tableColumns[tableName] = columns;
      },
      error: (err: any) => console.error(`ğŸš¨ ${tableName} Kolon Listesi AlÄ±nÄ±rken Hata:`, err)
    });
  }

  /** âœ… Tabloyu seÃ§me */
  dropTable(event: CdkDragDrop<string[]>) {
    const selectedTable = event.previousContainer.data[event.previousIndex];
    this.selectedTable = selectedTable;
    console.log(`ğŸ“Œ SeÃ§ilen Tablo: ${this.selectedTable}`);
  }

  /** âœ… Kolonu iÅŸlem alanÄ±na bÄ±rakma */
  dropColumn(event: CdkDragDrop<string[]>) {
    if (!this.selectedTable) return;
    const movedColumn = event.previousContainer.data[event.previousIndex];

    this.selectedColumns.push({ table: this.selectedTable, column: movedColumn });

    event.previousContainer.data.splice(event.previousIndex, 1);
  }

  /** âœ… Yeni input ekleme */
  addNewInput() {
    if (!this.newInputName.trim()) return;
    this.inputFields.push({ name: this.newInputName, dataType: 'integer' }); // ğŸ”¹ Default olarak integer atanÄ±yor
    this.newInputName = '';
  }

  /** âœ… InputlarÄ± iÅŸlem alanÄ±na bÄ±rakma */
/** âœ… InputlarÄ± iÅŸlem alanÄ±na bÄ±rakma */
dropToSelected(event: CdkDragDrop<any[]>) {
  const movedItem = event.previousContainer.data[event.previousIndex];

  if (movedItem.name) {
    this.selectedColumns.push({ name: movedItem.name, dataType: movedItem.dataType || 'integer' });
  } else if (movedItem.table && movedItem.column) {
    this.selectedColumns.push(movedItem);
  }

  event.previousContainer.data.splice(event.previousIndex, 1);
}


  /** âœ… InputlarÄ± iÅŸlem alanÄ±na bÄ±rakma */
/** âœ… InputlarÄ± iÅŸlem alanÄ±na bÄ±rakma */
dropInput(event: CdkDragDrop<{ name: string, dataType: string }[]>) {
  const movedInput = event.previousContainer.data[event.previousIndex];

  // âœ… SeÃ§ilen input'u iÅŸlem alanÄ±na ekle
  this.selectedColumns.push({ name: movedInput.name, dataType: movedInput.dataType || 'integer' });

  // âœ… Orijinal input listesinden kaldÄ±r
  event.previousContainer.data.splice(event.previousIndex, 1);
}

createOperation() {
  if (!this.operationName.trim()) {
    alert("LÃ¼tfen iÅŸlem adÄ±nÄ± girin!");
    return;
  }

  // âœ… KullanÄ±cÄ±nÄ±n seÃ§tiÄŸi tablolarÄ± belirle (undefined olanlarÄ± sil)
  const selectedTables = Array.from(
    new Set(this.selectedColumns.map(col => col.table).filter((table): table is string => Boolean(table)))
  );

  // âœ… KullanÄ±cÄ±nÄ±n seÃ§tiÄŸi kolonlarÄ± JSON formatÄ±na uygun hale getir
  const formattedColumns = this.selectedColumns
    .filter(col => col.table && col.column) // GeÃ§erli kolonlarÄ± al
    .map(col => ({
      table: col.table,
      column: col.column,
      operation: col.operation || null, // KullanÄ±cÄ±nÄ±n seÃ§tiÄŸi iÅŸlem
      islem: col.operation || null      // JSON'da "islem" olarak ekledik
    }));

  // âœ… KullanÄ±cÄ±nÄ±n eklediÄŸi giriÅŸ alanlarÄ±nÄ± JSON formatÄ±na uygun hale getir
  const formattedInputs = this.selectedColumns
    .filter(col => col.name && col.dataType) // âœ… SeÃ§ili input'larÄ± al
    .map(input => ({
      name: input.name,
      dataType: input.dataType || 'string'  // ğŸ”¹ VarsayÄ±lan olarak string atanÄ±yor
    }));

  console.log("âœ… Ä°ÅŸlem AdÄ±:", this.operationName);
  console.log("âœ… SeÃ§ilen Tablolar:", selectedTables);
  console.log("âœ… SeÃ§ilen Kolonlar:", formattedColumns);
  console.log("âœ… SeÃ§ilen Input'lar:", formattedInputs);

  // âœ… Backend'e gÃ¶nderilecek JSON oluÅŸtur
  const payload = {
    name: this.operationName,
    jsonData: {
      tables: selectedTables,
      columns: formattedColumns,
      inputs: formattedInputs
    }
  };

  console.log("ğŸ“Œ GÃ¶nderilen JSON:", JSON.stringify(payload, null, 2));

  this.islemlerService.createOperation(payload.name, selectedTables, formattedColumns, formattedInputs)
    .subscribe(response => {
      console.log("âœ… Ä°ÅŸlem baÅŸarÄ±yla oluÅŸturuldu:", response);
      alert(`"${this.operationName}" iÅŸlemi baÅŸarÄ±yla oluÅŸturuldu!`);
      this.operationName = ''; // Input'u temizle
    }, error => {
      console.error("ğŸš¨ Ä°ÅŸlem oluÅŸturulurken hata:", error);
      alert("Bir hata oluÅŸtu, lÃ¼tfen tekrar deneyin.");
    });

    this.islemlerService.createProcedure(payload.name, selectedTables, formattedColumns, formattedInputs)
    .subscribe(response => {
      console.log("âœ… Ä°ÅŸlem baÅŸarÄ±yla oluÅŸturuldu:", response);
      alert(`"${this.operationName}" iÅŸlemi baÅŸarÄ±yla oluÅŸturuldu!`);
      this.operationName = ''; // Input'u temizle
    }, error => {
      console.error("ğŸš¨ Ä°ÅŸlem oluÅŸturulurken hata:", error);
      alert("Bir hata oluÅŸtu, lÃ¼tfen tekrar deneyin.");
    });
}





}
